---
title: "chromVAR results"
---

**Libraries**

```{r}
library(Signac)
library(Seurat)
library(ArchR)
library(tidyverse)
library(furrr)
library(reticulate)

addArchRThreads(threads = 32, force = T)

# always set seed!!!
set.seed(105)

# set python
use_virtualenv("~/composite/analysis/old_scripts/sc_py_env")
```

**Import data**

```{r}
archr_B = loadArchRProject("rdata/archr/prelim_anno_B")
archr_T = loadArchRProject("rdata/archr/prelim_anno_T")

wnn = qs::qread("rdata/02_04_integrated.qs", nthreads = 32)
LN_ID = c("LN0025","LN0027","LN0177","LN0193","LN0438")
```

### TO DELETE? Create subsetted chromatin object with `Peaks`

**Fragment files**

```{r}
# get frag files
dir = paste0("~/composite/cellranger/",LN_ID,"/outs")
fragmentFiles = list.files(path=dir, full.names = T, pattern = "fragments.tsv.gz$")

# create fragment objects

```

**Counts in Peaks**

```{r}
# get counts in peaks, create list (B always first)  
peakCounts = lapply(c(archr_B,archr_T), function(x){
  
  # get PeakMatrix
  se = getMatrixFromProject(x, useMatrix = "PeakMatrix")
  mat = assay(se)
  
  # change cell names to match frag files
  colnames(mat) = gsub("#","_",colnames(se))
  
  # add rownames
  rownames(mat) = paste0("peak_",seq_along(1:nrow(mat)))
  
  return(mat)
})
```

### Subset wnn object

```{r}
# get levels
Bcells = levels(wnn)[grep("B_",levels(wnn))]
Tcells = levels(wnn)[grep("T_",levels(wnn))]

# subset
wnn_B = subset(wnn, idents = Bcells)
wnn_T = subset(wnn, idents = Tcells)
```

### Add chromVAR assay

```{r}
# get motif deviations and z scores for B
motifSE_B = getMatrixFromProject(archr_B, "HOCOv12Matrix", verbose = T)
devMat_B = assay(motifSE_B, "deviations")
zMat_B = assay(motifSE_B, "z")

# rename columns
colnames(devMat_B) = gsub("#","_",colnames(devMat_B))
colnames(zMat_B) = gsub("#","_",colnames(zMat_B))

# get motif deviations T
motifSE_T = getMatrixFromProject(archr_T, "HOCOv12Matrix", verbose = F)
devMat_T = assay(motifSE_T, "deviations")
zMat_T = assay(motifSE_T, "z")

# rename columns
colnames(devMat_T) = gsub("#","_",colnames(devMat_T))
colnames(zMat_T) = gsub("#","_",colnames(zMat_T))

# create assay
chrVar_B = CreateAssay5Object(
  counts = devMat_B,
  data = zMat_B
)

chrVar_T = CreateAssay5Object(
  counts = devMat_T,
  data = zMat_T
)

# add to object
wnn_B[["chromVAR"]] = chrVar_B
wnn_T[["chromVAR"]] = chrVar_T
```

### Reduction TO DO

```{r}
DefaultAssay(wnn_B) = "chromVAR"
DefaultAssay(wnn_T) = "chromVAR"

# get Variable features, optional?
# wnn_B = FindVariableFeatures(wnn_B, nfeatures = 500)
# wnn_T = FindVariableFeatures(wnn_T, nfeatures = 500)

# PCA
wnn_B = RunPCA(wnn_B, features = rownames(wnn_B), reduction.name = "chrvarPCA")

test = prcomp(t(wnn_B[["chromVAR"]]$counts), scale = F)

# UMAP
test = RunUMAP(wnn_T, reduction.key = "chrvarUMAP", features = rownames(wnn_B))
```

### Differential deviations

```{r}
# get all markers
B_markers = FindAllMarkers(
  wnn_B,
  slot = "counts",
  max.cells.per.ident = 500,
  only.pos = T
)

T_markers = FindAllMarkers(
  wnn_T,
  slot = "counts",
  only.pos = T,
  max.cells.per.ident = 500
)
```

**Top B**

```{r}
# take top 5 from each
topB = B_markers %>%
  filter(p_val_adj < 0.01) %>%
  group_by(cluster) %>%
  arrange(desc(avg_log2FC)) %>%
  slice_head(n = 5) %>%
  mutate(gene = fct_reorder2(gene,cluster,avg_log2FC))

topT = T_markers %>%
  filter(p_val_adj < 0.01) %>%
  group_by(cluster) %>%
  arrange(desc(avg_log2FC)) %>%
  slice_head(n = 5) %>%
  mutate(gene = fct_reorder2(gene,cluster,avg_log2FC))

# TO DO: Save in ggplot
# DotPlot(
#   wnn_B, 
#   features = unique(topB$gene),
#   scale = F
# )+
#   RotatedAxis() +
#   scale_y_discrete(limits=rev) +
#   scale_color_viridis_c(option = "plasma", end = 0.85) + 
#   theme(axis.text.x = element_text(size = 10))

# heatmap TO TROUBLESHOOT
DoHeatmap(wnn_B, slot = "data", features = unique(topB$gene))
```

**Feature Plot**

```{r}
tf = "MXI1-0.P.B"

FeaturePlot(
  wnn_B,
  features = tf,
  pt.size = 1,
  reduction = "rpca.rnaPCA.wnnUMAP",
  order = T, 
  max.cutoff = "q99",
  min.cutoff = "q01"
) +
  scale_color_viridis_c(option = "turbo") +
  theme(
    aspect.ratio = 3/3,
    axis.text = element_blank(),
    axis.ticks = element_blank()
  ) +
  xlim(-12,-2) +
  ylim(-10,10) +
  labs(x = NULL, y = NULL)
```

**Heatmap TO TROUBLESHOOT**

```{r}
# get matrix with features
sigTFs = filter(B_markers, p_val_adj < 0.05)
sigTFs = unique(sigTFs$gene)

# downsample wnn
cells = WhichCells(wnn_B, idents = levels(wnn_B), downsample = 100)
wnn_Bsub = wnn_B[,cells]

# get z score mat, rows are cells, cols are TFs
sigBmat = FetchData(
  wnn_Bsub,
  vars = sigTFs,
  layer = "data"
)

sigBmat = as.matrix(t(sigBmat))

library(ComplexHeatmap)

anno = HeatmapAnnotation(
  Sample = wnn_Bsub$Sample,
  Cluster = wnn_Bsub$prelim_anno
)

Heatmap(
  sigBmat, 
  #top_annotation = anno,
  name = "z-score",
  top_annotation = NULL,
  show_row_dend = F,
  show_column_dend = F,
  show_column_names = F,
  show_row_names = F
)
```

**Volcano**

```{r}
# add column to label
B_markers = group_split(B_markers, cluster)
topB = group_split(topB, cluster)

plotdf = map2(
  B_markers,
  topB,
  ~ .x %>%
    mutate(
      label = ifelse(
        gene %in% .y$gene, T,F
      )
    )
)

plotdf = do.call(rbind, plotdf)

library(ggrepel)

plotdf %>%
ggplot(., aes(avg_log2FC,-log10(p_val_adj)))+
  geom_jitter(pch = 21)+
  geom_jitter(data = . %>% filter(p_val_adj < 0.01), 
              fill = "#E76F51", pch =21, alpha = 0.5) +
  geom_text_repel(data = . %>% filter(label == T),
                  aes(label = gene),
                  size = 4,
                  force = 5) +
  theme_bw() +
  theme(
    panel.grid = element_blank()
  ) +
  facet_wrap(vars(cluster), scales = "free")
```

**T cells**

```{r}
# add column to label
T_markers = group_split(T_markers, cluster)
topT = group_split(topT, cluster)

plotdfT = map2(
  T_markers,
  topT,
  ~ .x %>%
    mutate(
      label = ifelse(
        gene %in% .y$gene, T,F
      )
    )
)

plotdfT = do.call(rbind, plotdfT)

library(ggrepel)

plotdfT %>%
ggplot(., aes(avg_log2FC,-log10(p_val_adj)))+
  geom_jitter(pch = 21)+
  geom_jitter(data = . %>% filter(p_val_adj < 0.01), 
              fill = "#E76F51", pch =21, alpha = 0.5) +
  geom_text_repel(data = . %>% filter(label == T),
                  aes(label = gene),
                  size = 4,
                  force = 5) +
  theme_bw() +
  theme(
    panel.grid = element_blank()
  ) +
  facet_wrap(vars(cluster), scales = "free")
```
